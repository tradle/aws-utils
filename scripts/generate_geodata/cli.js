#!/usr/bin/env node
const fetchRegions = require('./regions.js')
const fetchSMSData = require('./sms_data.js')
const fs = require('fs/promises')
const countries = require('world-countries')
const haversine = require('haversine')
const { stringify } = require('javascript-stringify')

const prettify = obj => stringify(obj, null, 2)

async function fetchCached (cacheFile, operation) {
  try {
    const data = await operation()
    await fs.writeFile(cacheFile, JSON.stringify(data, null, 2))
    return data
  } catch (err) {
    console.warn(`[WARN] Falling back to "${cacheFile}" as the data could not be loaded: \n    ${err.stack.toString().split('\n').join('\n    ')}`)
    return JSON.parse(await fs.readFile(cacheFile, 'utf-8'))
  }
}

function findRegion (center, regions) {
  let closestDistance = Number.MAX_VALUE
  let closest
  for (const region of regions) {
    const distance = haversine(center, region)
    if (closest === undefined || closestDistance > distance) {
      closest = region
      closestDistance = distance
    }
  }
  return closest.code
}

// TODO: Remove after upgrading world-countries to > 4.0.0
function callingCodes (idd) {
  const base = idd.root.substr(1)
  return idd.suffixes.map(suffix => `${base}${suffix.replace(/X+$/, '')}`)
}

async function main () {
  const [regions, smsData] = await Promise.all([
    fetchCached(`${__dirname}/regions.backup.json`, fetchRegions),
    fetchCached(`${__dirname}/sms_data.backup.json`, fetchSMSData)
  ])
  const smsRegions = regions.filter(region => smsData.smsRegions.includes(region.code))
  const data = {}
  for (const country of countries) {
    const center = {
      latitude: country.latlng[0],
      longitude: country.latlng[1]
    }
    const id = country.cca2
    const sms = smsData.idToService[id]
    const miniCountry = {
      id,
      cca3: country.cca3,
      callingCodes: callingCodes(country.idd),
      title: country.name.common,
      awsRegion: findRegion(center, regions)
    }
    if (sms) {
      sms.region = findRegion(center, smsRegions)
      miniCountry.sms = sms
    }
    data[id] = miniCountry
  }
  await fs.writeFile(`${__dirname}/../../packages/aws-common-utils/src/countries.ts`, `import { Country } from './types'

// Generated by "npm run generate_geodata" in tradle/aws-utils repository
export const countries: { [id: string]: Country } = ${prettify(data)}
`)
}

main().catch(err => {
  console.error(err)
  process.exitCode = 1
})